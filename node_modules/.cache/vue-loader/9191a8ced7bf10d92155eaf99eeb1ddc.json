{"remainingRequest":"/home/ekaterina/Projects/eng-family/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/ekaterina/Projects/eng-family/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/ekaterina/Projects/eng-family/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ekaterina/Projects/eng-family/src/components/Task2.vue?vue&type=template&id=11f40e66&scoped=true&","dependencies":[{"path":"/home/ekaterina/Projects/eng-family/src/components/Task2.vue","mtime":1608675409534},{"path":"/home/ekaterina/Projects/eng-family/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ekaterina/Projects/eng-family/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/ekaterina/Projects/eng-family/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ekaterina/Projects/eng-family/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}